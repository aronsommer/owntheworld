{"version":3,"sources":["web3gl/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["web3","http","require","etherscan_key","window","web3gl","connect","getNFT","nftList","connectAccount","sendContract","sendContractResponse","sendTransaction","sendTransactionResponse","signMessage","signMessageResponse","initialLogin","onboard","Onboard","networkName","web3NetworkName","networkId","web3NetworkId","subscriptions","address","location","reload","wallet","Web3","provider","network","walletSelect","wallets","walletName","preferred","infuraKey","a","url","get","res","body","on","chunk","obj","JSON","parse","i","Object","keys","length","console","log","result","contractAddress","tokenID","e","walletCheck","eth","net","getId","getAccounts","message","from","personal","sign","signature","method","abi","contract","args","value","gas","Contract","methods","send","undefined","transactionHash","error","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aa20726.chunk.js","sourcesContent":["import Onboard from \"bnc-onboard\";\r\nimport Web3 from \"web3\";\r\nconst http = require('http')\r\n\r\n\r\nlet web3: Web3;\r\nvar etherscan_key = 'W5WJQK111XVR9RQMQUIMZCCCAUWZ9GFIXS'\r\n// declare types\r\ndeclare global {\r\n  interface Window {\r\n    web3NetworkName: string; // network.js\r\n    web3NetworkId: number; // network.js\r\n    infuraKey:string; // network.js\r\n    nftList:[];\r\n    web3gl: Web3GL;\r\n  }\r\n}\r\ninterface Web3GL {\r\n  connect: () => void;\r\n  getNFT:(address:string) => void;\r\n  connectAccount: string;\r\n  nftList:[];\r\n  sendContract: (\r\n    method: string,\r\n    abi: string,\r\n    contract: string,\r\n    args: string,\r\n    value: string,\r\n    gas: string\r\n  ) => void;\r\n  sendContractResponse: string;\r\n  sendTransaction: (to: string, value: string, gas: string) => void;\r\n  sendTransactionResponse: string;\r\n  signMessage: (message: string) => void;\r\n  signMessageResponse: string;\r\n}\r\n\r\n// global variables\r\nwindow.web3gl = {\r\n  connect,\r\n  getNFT,\r\n  nftList: [],\r\n  connectAccount: \"\",\r\n  sendContract,\r\n  sendContractResponse: \"\",\r\n  sendTransaction,\r\n  sendTransactionResponse: \"\",\r\n  signMessage,\r\n  signMessageResponse: \"\",\r\n};\r\n\r\nlet initialLogin = true;\r\n\r\n// https://docs.blocknative.com/onboard\r\nconst onboard = Onboard({\r\n  networkName: window.web3NetworkName, // from network.js\r\n  networkId: window.web3NetworkId, // from network.js\r\n\r\n  subscriptions: {\r\n    address: () => {\r\n      if (!initialLogin) {\r\n        window.location.reload();\r\n        connect();\r\n      }\r\n    },\r\n    wallet: (wallet) => {\r\n      web3 = new Web3(wallet.provider);\r\n    },\r\n    network: () => {\r\n      if (!initialLogin) {\r\n        window.location.reload();\r\n        connect();\r\n      }\r\n    },\r\n  },\r\n  // \"2d0062a43e9e4086829df115488b45a8\"\r\n  walletSelect: {\r\n    wallets: [\r\n      { walletName: \"metamask\", preferred: true },\r\n      {\r\n        walletName: \"walletConnect\",\r\n        infuraKey: window.infuraKey,\r\n        preferred: true,\r\n      },\r\n      { walletName: \"torus\", preferred: true },\r\n    ],\r\n  },\r\n});\r\n\r\n\r\nasync function getNFT(address:string) {\r\n  let url = `http://api.etherscan.io/api?module=account&action=tokennfttx&address=${address}&startblock=0&endblock=999999999&sort=asc&key=${etherscan_key}`;\r\n\r\n  http.get(url, function(res:any){\r\n     let body = '';\r\n \r\n     res.on('data', function(chunk:any){\r\n         body += chunk;\r\n     });\r\n \r\n     res.on('end', function(){\r\n         const obj = JSON.parse(body);\r\n          for (let i = 0; i <Object.keys(obj).length; i++ ) {\r\n            console.log(\"Contract Addr \" + obj.result[i].contractAddress);\r\n            console.log(\"Contract TokenID \" + obj.result[i].tokenID);\r\n          }\r\n          return window.web3gl.nftList;\r\n     });\r\n }).on('error', function(e:string){\r\n       console.log(\"Got an error: \", e);\r\n });\r\n}\r\n\r\n// call window.web3gl.connect() to display onboardjs modal\r\nasync function connect() {\r\n  await onboard.walletSelect();\r\n  const walletChecked = await onboard.walletCheck();\r\n  // if cancels login\r\n  if (!walletChecked) window.location.reload();\r\n  initialLogin = false;\r\n  if ((await web3.eth.net.getId()) === window.web3NetworkId) {\r\n    window.web3gl.connectAccount = (await web3.eth.getAccounts())[0];\r\n  }\r\n}\r\n\r\n/*\r\nsign message to verify user address.\r\nwindow.web3gl.signMessage(\"hello\")\r\n*/\r\nasync function signMessage(message: string) {\r\n  try {\r\n    const from: string = (await web3.eth.getAccounts())[0];\r\n    const signature: string = await web3.eth.personal.sign(message, from, \"\");\r\n    window.web3gl.signMessageResponse = signature;\r\n  } catch (error: any) {\r\n    window.web3gl.signMessageResponse = error.message;\r\n  }\r\n}\r\n\r\n/*\r\nconst method = \"increment\"\r\nconst abi = `[ { \"inputs\": [], \"name\": \"increment\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"x\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]`;\r\nconst contract = \"0xB6B8bB1e16A6F73f7078108538979336B9B7341C\"\r\nconst args = \"[]\"\r\nconst value = \"0\"\r\nconst gas = \"1000000\" // gas limit\r\nwindow.web3gl.sendContract(method, abi, contract, args, value, gas)\r\n\r\n*/\r\nasync function sendContract(\r\n  method: string,\r\n  abi: string,\r\n  contract: string,\r\n  args: string,\r\n  value: string,\r\n  gas: string\r\n) {\r\n  const from = (await web3.eth.getAccounts())[0];\r\n  new web3.eth.Contract(JSON.parse(abi), contract).methods[method](\r\n    ...JSON.parse(args)\r\n  )\r\n    .send({\r\n      from,\r\n      value,\r\n      gas: gas ? gas : undefined,\r\n    })\r\n    .on(\"transactionHash\", (transactionHash: any) => {\r\n      window.web3gl.sendContractResponse = transactionHash;\r\n    })\r\n    .on(\"error\", (error: any) => {\r\n      window.web3gl.sendContractResponse = error.message;\r\n    });\r\n}\r\n\r\n/*\r\nconst to = \"0xB6B8bB1e16A6F73f7078108538979336B9B7341C\"\r\nconst value = \"12300000000000000\"\r\nconst gas = \"21000\"\r\nsendTransaction(to, value, gas);\r\n*/\r\nasync function sendTransaction(to: string, value: string, gas: string) {\r\n  const from = (await web3.eth.getAccounts())[0];\r\n  web3.eth\r\n    .sendTransaction({\r\n      from,\r\n      to,\r\n      value,\r\n      gas: gas ? gas : undefined,\r\n    })\r\n    .on(\"transactionHash\", (transactionHash: any) => {\r\n      window.web3gl.sendTransactionResponse = transactionHash;\r\n    })\r\n    .on(\"error\", (error: any) => {\r\n      window.web3gl.sendTransactionResponse = error.message;\r\n    });\r\n}\r\n","import \"./web3gl\"\r\n\r\nfunction App() {\r\n  return <div></div>;\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}